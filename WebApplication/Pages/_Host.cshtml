@page "/"
@namespace WebApplication.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>АПК-ДК</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="WebApplication.styles.css" rel="stylesheet" />
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">
</head>

<body>
<component type="typeof(App)" render-mode="ServerPrerendered" />

<div id="blazor-error-ui">
    <environment include="Staging,Production">
        An error has occurred. This application may no longer respond until reloaded.
    </environment>
    <environment include="Development">
        An unhandled exception has occurred. See browser dev tools for details.
    </environment>
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<script src="_framework/blazor.server.js"></script>
<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
<script>
function SetSvg(svg) {
    document.getElementById("svg-placeholder").innerHTML = svg;
}

function ChangeBlinkState() {
        const svgPanels = document.querySelectorAll('svg g.main-panel');

        svgPanels.forEach(function(rect) {
            var attr = rect.getAttribute("data-first-color");

            if (attr === "0") {
                rect.setAttribute("data-first-color", "1");
            } else {
                rect.setAttribute("data-first-color", "0");
            }
        });
}
    
function SetMeasure(objectId, measureId, newValue, measureUnit) {
    const allItems = document.querySelectorAll(`text[data-measure-objectid="${objectId}"][data-measure-id="${measureId}"]`);

    allItems.forEach(item => {
        if (newValue === null) {
            item.textContent = '?';
        } else {
            var newTextValue;

            if (item.getAttribute("data-measure-showzerosafterpoint") === 'false') {
                newTextValue = `${newValue|0}`;
            } else {
                newTextValue = `${newValue.toFixed(3)}`;
            }

            if (measureUnit && measureUnit.length === 0) {
                item.textContent = newTextValue;
            } else {
                item.textContent = `${newTextValue} ${measureUnit}`;
            }
        }
    });
}

function SetObjectState(objectId, newState) {
    const allItems = document.querySelectorAll(`g[data-object-id="${objectId}"]`);
    allItems.forEach(item => item.setAttribute("data-state", newState));
}
</script>

</body>
</html>

